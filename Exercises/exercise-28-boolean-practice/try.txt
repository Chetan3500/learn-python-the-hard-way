1. True and True
2. False and True
3. 1 == 1 and 2 == 1
4. "test" == "test"
5. 1 == 1 or 2 != 1
6. True and 1 == 1
7. False and 0 != 0
8. True or 1 == 1
9. "test" == "testing"
10. 1 != 0 and 2 == 1
11. "test" != "testing"
12. "test" == 1
13. not (True and False)
14. not (1 == 1 and 0 != 1)
15. not (10 == 1 or 1000 == 1000)
16. not (1 != 10 or 3 == 4)
17. not ("testing" == "testing" and "Zed" == "Cool Guy")
18. 1 == 1 and (not ("testing" == 1 or 1 == 0))
19. "chunky" == "bacon" and (not (3 == 4 or 3 == 3))
20. 3 == 3 and (not ("testing" == "testing" or "Python" == "Fun"))

Whenever you see these Boolean logic statements, you can solve them easily by this simple process:
1. Find an equality test (== or !=) and replace it with its truth.
2. Find each and/or inside parentheses and solve those first.
3. Find each not and invert it.
4. Find any remaining and/or and solve it.
5. When you are done you should have True or False.

demonstrate with a variation on item 20:
	3 != 4 and not ("testing" != "test" or "Python" == "Python")
Here’s me going through each of the steps and showing you the translation until I’ve boiled it down to a
single result:
1. Solve each equality test:
3 != 4 is True: True and not ("testing" != "test" or "Python" == "Python")
"testing" != "test" is True: True and not (True or "Python" == "Python")
"Python" == "Python": True and not (True or True)
2. Find each and/or in parentheses ():
(True or True) is True: True and not (True)
3. Find each not and invert it:
not (True) is False: True and False
4. Find any remaining and/ors and solve them:
True and False is False
